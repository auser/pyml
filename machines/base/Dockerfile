


# DO NOT MODIFY THIS AUTOGENERATED FILE
# Change ./machines/base/Dockerfile.m4

# FROM ubuntu:trusty
FROM nvidia/cuda:7.5-cudnn4-devel

ENV DEBIAN_FRONTEND noninteractive
ENV INSTALL_ROOT /usr/local/src
ENV CONDA_DIR /opt/conda

COPY system-conf /

# Install common utilities
# python-software-properties software-properties-common \
# build-essential curl
RUN apt-get -y update && \
    apt-get install -y -q \
    wget \
    build-essential curl \
    cmake \
    git

RUN locale-gen en_US en_US.UTF-8
RUN dpkg-reconfigure locales


## CLEANUP


# Configure environment
ENV CONDA_DIR /opt/conda
ENV PATH $CONDA_DIR/bin:$PATH
ENV SHELL /bin/bash
ENV NB_USER compute
ENV NB_UID 1000

ENV LC_ALL en_US.UTF-8
ENV LANG en_US.UTF-8
ENV LANGUAGE en_US.UTF-8

# Create compute user with UID=1000 and in the 'users' group
RUN useradd -m -s /bin/bash -N -u $NB_UID $NB_USER && \
    mkdir -p $CONDA_DIR && \
    chown $NB_USER $CONDA_DIR

RUN rm /bin/sh && ln -s /bin/bash /bin/sh

RUN apt-get update --fix-missing && apt-get install -y wget bzip2 ca-certificates \
  libglib2.0-0 libxext6 libsm6 libxrender1 \
  git mercurial subversion
RUN echo 'export PATH=/opt/conda/bin:$PATH' > /etc/profile.d/conda.sh && \
  wget --quiet https://repo.continuum.io/miniconda/Miniconda2-4.0.5-Linux-x86_64.sh && \
  /bin/bash /Miniconda2-4.0.5-Linux-x86_64.sh -f -b -p /opt/conda && \
  rm Miniconda2-4.0.5-Linux-x86_64.sh

RUN apt-get install -y curl grep sed dpkg && \
  TINI_VERSION=$(curl https://github.com/krallin/tini/releases/latest | grep -o "/v.*\"" | sed 's:^..\(.*\).$:\1:') && \
  curl -L "https://github.com/krallin/tini/releases/download/v${TINI_VERSION}/tini_${TINI_VERSION}.deb" > tini.deb && \
  dpkg -i tini.deb && \
  rm tini.deb && \
  apt-get clean

ENV PATH /opt/conda/bin:$PATH

ENTRYPOINT [ "/usr/bin/tini", "--" ]z
ENV PATH $CONDA_DIR/bin:$PATH

# libav-tools for matplotlib anim
RUN apt-get update -qq && \
    apt-get install -qy --no-install-recommends --force-yes \
      libav-tools \
      libhdf5-dev graphviz libhdf5-dev \
      libfreetype6-dev libpng12-dev \
      pkg-config build-essential cmake git \
      libx11-dev \
      unzip; \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

# Install Python 3 packages
RUN $CONDA_DIR/bin/conda create --quiet --yes -n py3 python=3.4
RUN $CONDA_DIR/bin/conda create --quiet --yes -n py2 python=2.7

# http://bugs.python.org/issue19846
# > At the moment, setting "LANG=C" on a Linux system *fundamentally breaks Python 3*, and that's not OK.
ENV LANG C.UTF-8

COPY requirements.txt /tmp/requirements.txt
RUN source activate py2 && \
    $CONDA_DIR/bin/conda install --yes \
    'cython=0.23*' \
    'numpy' \
    'statsmodels' && \
    pip install --upgrade --user ipykernel && \
    pip install --upgrade --user -r /tmp/requirements.txt

RUN source activate py3 && \
    $CONDA_DIR/bin/conda install --yes \
    'cython=0.23*' \
    'numpy' \
    'statsmodels' && \
    pip install --upgrade --user ipykernel && \
    pip install --upgrade --user -r /tmp/requirements.txt


RUN apt-get update -yq && apt-get install -yq gfortran
RUN git clone https://github.com/xianyi/OpenBLAS /usr/local/src/OpenBLAS

RUN cd /usr/local/src/OpenBLAS && \
    make FC=gfortran && \
    make PREFIX=/opt/openblas install


# include(`cuda.m4')

ENV LEPTONICA_VERSION 1.73
#######################
# Leptonica
#######################

RUN apt-get update -qq -y && \
    apt-get install -yq \
    libwebp-dev \
    giflib-tools \
    autoconf automake libtool checkinstall

WORKDIR $INSTALL_ROOT
RUN wget http://www.leptonica.org/source/leptonica-${LEPTONICA_VERSION}.tar.gz -O $INSTALL_ROOT/leptonica.tar.gz && \
    tar -zxvf leptonica.tar.gz && \
    rm -rf leptonica.tar.gz && \
    cd leptonica-${LEPTONICA_VERSION} && \
    ./configure && \
    make -j ${NUM_CORES} && \
    make install && \
    ldconfig

#######################
# End Leptonica
#######################

#######################
# Tesseract
#######################

WORKDIR $INSTALL_ROOT/
RUN wget https://github.com/tesseract-ocr/tesseract/archive/3.04.00.tar.gz \
      -O $INSTALL_ROOT/tesseract.tar.gz
RUN tar -zxvf $INSTALL_ROOT/tesseract.tar.gz && \
    rm -rf tesseract.tar.gz && \
    cd tesseract-3.04.00 && \
    ls -la && \
    /bin/bash ./autogen.sh && \
    ./configure && \
    LDFLAGS="-L/usr/local/lib" CFLAGS="-I/usr/local/include" make -j ${NUM_CORES} && \
    make install && \
    ldconfig

#######################
# End Tesseract
#######################

RUN git clone --branch v0.6.1 --depth 1 git://source.ffmpeg.org/ffmpeg ${INSTALL_ROOT}/ffmpeg


#######################
# OpenCV
#######################

RUN git clone --branch 3.1.0 --depth 1 https://github.com/Itseez/opencv.git $INSTALL_ROOT/opencv && \
    git clone --branch 3.1.0 --depth 1 https://github.com/Itseez/opencv_contrib.git $INSTALL_ROOT/opencv_contrib

RUN mkdir $INSTALL_ROOT/opencv/build
WORKDIR $INSTALL_ROOT/opencv/build

ENV PY2_DIR "$CONDA_DIR/envs/py2"
ENV PY3_DIR "$CONDA_DIR/envs/py3"

RUN apt-get install -yq software-properties-common && \
    add-apt-repository ppa:george-edison55/cmake-3.x && \
    apt-get update -yq && \
    apt-get install -yq --only-upgrade cmake
    # apt-get install -yq qt5-default libvtk6-dev

RUN \
  export PY2_SITE_PACKAGES=$($PY2_DIR/bin/python -c "import site;print(site.getsitepackages()[0])") && \
  export PY3_SITE_PACKAGES=$($PY3_DIR/bin/python -c "import site;print(site.getsitepackages()[0])") && \
  export PY2_INCLUDE_DIR=$($PY2_DIR/bin/python -c "from distutils.sysconfig import get_python_inc; print(get_python_inc())") && \
  export PY3_INCLUDE_DIR=$($PY3_DIR/bin/python -c "from distutils.sysconfig import get_python_inc; print(get_python_inc())") && \

  export CUDA_LIB_PATH=/usr/local/cuda-7.5/targets/x86_64-linux/lib/stubs/:/usr/local/cuda/lib64/stubs/:$LD_LIBRARY_PATH && \
    export LD_LIBRARY_PATH=$CUDA_LIB_PATH:$LD_LIBRARY_PATH && \
    cmake -D CMAKE_BUILD_TYPE=Release \
          -D CMAKE_INSTALL_PREFIX=/usr/local \
          -D WITH_TBB=ON \
          -D WITH_V4L=ON \
#          -D INSTALL_C_EXAMPLES=ON \     bug w/ tag=3.1.0: cmake has error
          -D INSTALL_PYTHON_EXAMPLES=ON \
          -D BUILD_EXAMPLES=ON \
          -D BUILD_DOCS=OFF \
          -D OPENCV_EXTRA_MODULES_PATH=$INSTALL_ROOT/opencv_contrib/modules \
          -D WITH_XIMEA=YES \
#          -D WITH_QT=YES \
          -D WITH_FFMPEG=YES \
          -D WITH_PVAPI=YES \
          -D WITH_GSTREAMER=YES \
          -D WITH_TIFF=YES \
          -D WITH_OPENCL=YES \
          -D ENABLE_FAST_MATH=1 -D CUDA_FAST_MATH=1 -D WITH_CUBLAS=1 \

          -D Tesseract_LIBRARY=/usr/local/lib/libtesseract.so \
          -D Tesseract_INCLUDE_DIR=/usr/local/include/tesseract \

          -D OPENCV_EXTRA_MODULES_PATH=$INSTALL_ROOT/opencv_contrib/modules \

          -D BUILD_opencv_python2=ON \
          -D PYTHON2_NUMPY_INCLUDE_DIRS=$PY2_SITE_PACKAGES/numpy/core/include/ \

          -D PYTHON2_EXECUTABLE=$PY2_DIR/bin/python \
          -D PYTHON2_PACKAGES_PATH=$PY2_SITE_PACKAGES \
          -D PYTHON2_LIBRARY=$PY2_DIR/lib/libpython2.7.so \
          -D PYTHON2_NUMPY_INCLUDE_DIRS=$PY2_SITE_PACKAGES/numpy/core/include \

          -D PYTHON_INCLUDE_DIR=$PY2_INCLUDE_DIR \
          -D PYTHON_INCLUDE_DIR2=$PY3_INCLUDE_DIR \

          -D BUILD_opencv_python3=ON \
          -D PYTHON3_EXECUTABLE=$PY3_DIR/bin/python \
          -D PYTHON3_INCLUDE_DIR=$PY3_DIR/include/python3.4m \
          -D PYTHON3_INCLUDE_DIRS=$PY3_DIR/include/python3.4m \
          -D PYTHON_INCLUDE_DIRS=$PY3_DIR/include/python3.4m \
          -D PYTHON3_PACKAGES_PATH=$PY3_SITE_PACKAGES \
          -D PYTHON3_LIBRARY=$PY3_DIR/lib/libpython3.4m.so \
          -D PYTHON3_NUMPY_INCLUDE_DIRS=$PY3_SITE_PACKAGES/numpy/core/include \
          .. && \
      make -j8

RUN make install && \
    ldconfig

ENV PYTHONPATH $PYTHONPATH:$($PY2_DIR/bin/python -c "import site;print(site.getsitepackages()[0])")
ENV PYTHONPATH $PYTHONPATH:$($PY3_DIR/bin/python -c "import site;print(site.getsitepackages()[0])")

RUN ls -l $INSTALL_ROOT/opencv/build/lib/python3

RUN cp $INSTALL_ROOT/opencv/build/lib/cv2.so $PY2_SITE_PACKAGES/cv2.so && \
    cp $INSTALL_ROOT/opencv/build/lib/python3/cv2.cpython-34m.so $PY3_SITE_PACKAGES/cv2.so

# RUN cp $INSTALL_ROOT/opencv/build/lib/cv2.so /usr/local/lib/python2.7/ && \
    # cp $INSTALL_ROOT/opencv/build/lib/cv2.so /usr/local/lib/python3.4/
RUN source activate py2 && \
    python2.7 -c "import cv2; print('cv2.__version__ = ' + str(cv2.__version__))"
RUN source activate py3 && \
    python3.4 -c "import cv2; print('cv2.__version__ = ' + str(cv2.__version__))"

#######################
# End OpenCV
#######################


USER compute

EXPOSE 8888
COPY entry.sh /opt/compute-container/entry.sh
RUN chmod +x /opt/compute-container/entry.sh
CMD ["/opt/compute-container/entry.sh"]